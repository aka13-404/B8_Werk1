### Macro set to attach probe (needs to be extended with servo)
[gcode_macro CONNECT_PROBE_PHASE_I]
gcode:
	# check if probe is already attached. Due to klipper limitations, this has to happen in separate macros.
	QUERY_PROBE
	_CONNECT_PROBE_PHASE_II

[gcode_macro _CONNECT_PROBE_PHASE_II]
gcode:
	{% if printer.probe.last_query %} #if probe reports triggered, it is not attached - don't attach probe if it is attached
		{% if printer.toolhead.homed_axes != 'xyz' %} #home if not homed
			G28
		{% endif %}
		G90
		G1 Z{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_z_clearance } F{ printer["gcode_macro _GLOBAL_VARIABLES"].speed_z }
		G1 Y{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_y - 50 } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move y to 50mm from klicky dock
		G1 X{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_x } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move x to klicky dock
		M400 #wait until done
		G1 Y{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_y } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move y to klicky dock
		G1 Y{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_y - 50 } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #return with attached probe
		QUERY_PROBE #check if probe is connected.  Due to klipper limitations, this has to happen in separate macros.
		_CONNECT_PROBE_PHASE_III
	{% else %}
		RESPOND MSG="Probe already connected"
	{% endif %}

[gcode_macro _CONNECT_PROBE_PHASE_III] #reports if connection was unsuccessfull
gcode:
	{% if printer.probe.last_query %}
		RESPOND PREFIX=tgalarm MSG="Probe connection unsuccessfull, check printer"
	{% endif %}



### Macro set to remove probe (needs to be extended with servo)
[gcode_macro DISCONNECT_PROBE_PHASE_I]
gcode:
	# check if probe is already attached. Due to klipper limitations, this has to happen in separate macros.
	QUERY_PROBE
	_DISCONNECT_PROBE_PHASE_II

[gcode_macro _DISCONNECT_PROBE_PHASE_II]
gcode:
	{% if printer.probe.last_query %} #if probe reports triggered, it is not connected - nothing to remove then
		RESPOND MSG="Probe already disconnected"
	{% else %}
		{% if printer.toolhead.homed_axes != 'xyz' %} #home if not homed
			G28
		{% endif %}
		G90
		G1 Z{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_z_clearance } F{ printer["gcode_macro _GLOBAL_VARIABLES"].speed_z }
		G1 Y{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_y - 50 } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move y to 50mm from klicky dock
		G1 X{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_x } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move x to klicky dock
		M400 #wait until done
		G1 Y{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_y } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #move y to klicky dock
		G1 X{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_position_x + 50 } F{ printer["gcode_macro _GLOBAL_VARIABLES"].klicky_attach_speed } #remove probe by going +50x
		QUERY_PROBE #check if probe is connected.  Due to klipper limitations, this has to happen in separate macros.
		_DISCONNECT_PROBE_PHASE_III
	{% endif %}

[gcode_macro _DISCONNECT_PROBE_PHASE_III]#reports if disconnection was unsuccessfull
gcode:
	{% if printer.probe.last_query %}
	{% else %}
		RESPOND PREFIX=tgalarm MSG="Probe disconnection unsuccessfull, check printer"
	{% endif %}